/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgeRatingDeclarationResponse,
  AppClipDefaultExperienceResponse,
  AppStoreReviewDetailResponse,
  AppStoreVersionAppClipDefaultExperienceLinkageRequest,
  AppStoreVersionAppClipDefaultExperienceLinkageResponse,
  AppStoreVersionBuildLinkageRequest,
  AppStoreVersionBuildLinkageResponse,
  AppStoreVersionCreateRequest,
  AppStoreVersionExperimentsResponse,
  AppStoreVersionLocalizationsResponse,
  AppStoreVersionPhasedReleaseResponse,
  AppStoreVersionResponse,
  AppStoreVersionSubmissionResponse,
  AppStoreVersionUpdateRequest,
  BuildResponse,
  CustomerReviewsResponse,
  ErrorResponse,
  RoutingAppCoverageResponse,
} from '../models';
import {
    AgeRatingDeclarationResponseFromJSON,
    AgeRatingDeclarationResponseToJSON,
    AppClipDefaultExperienceResponseFromJSON,
    AppClipDefaultExperienceResponseToJSON,
    AppStoreReviewDetailResponseFromJSON,
    AppStoreReviewDetailResponseToJSON,
    AppStoreVersionAppClipDefaultExperienceLinkageRequestFromJSON,
    AppStoreVersionAppClipDefaultExperienceLinkageRequestToJSON,
    AppStoreVersionAppClipDefaultExperienceLinkageResponseFromJSON,
    AppStoreVersionAppClipDefaultExperienceLinkageResponseToJSON,
    AppStoreVersionBuildLinkageRequestFromJSON,
    AppStoreVersionBuildLinkageRequestToJSON,
    AppStoreVersionBuildLinkageResponseFromJSON,
    AppStoreVersionBuildLinkageResponseToJSON,
    AppStoreVersionCreateRequestFromJSON,
    AppStoreVersionCreateRequestToJSON,
    AppStoreVersionExperimentsResponseFromJSON,
    AppStoreVersionExperimentsResponseToJSON,
    AppStoreVersionLocalizationsResponseFromJSON,
    AppStoreVersionLocalizationsResponseToJSON,
    AppStoreVersionPhasedReleaseResponseFromJSON,
    AppStoreVersionPhasedReleaseResponseToJSON,
    AppStoreVersionResponseFromJSON,
    AppStoreVersionResponseToJSON,
    AppStoreVersionSubmissionResponseFromJSON,
    AppStoreVersionSubmissionResponseToJSON,
    AppStoreVersionUpdateRequestFromJSON,
    AppStoreVersionUpdateRequestToJSON,
    BuildResponseFromJSON,
    BuildResponseToJSON,
    CustomerReviewsResponseFromJSON,
    CustomerReviewsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RoutingAppCoverageResponseFromJSON,
    RoutingAppCoverageResponseToJSON,
} from '../models';

export interface AppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest {
    id: string;
    fieldsAgeRatingDeclarations?: Array<AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum>;
}

export interface AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
    id: string;
    fieldsAppClips?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum>;
    fieldsAppClipAppStoreReviewDetails?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppClipDefaultExperienceLocalizations?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum>;
    limitAppClipDefaultExperienceLocalizations?: number;
    include?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum>;
}

export interface AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest {
    id: string;
}

export interface AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest {
    id: string;
    appStoreVersionAppClipDefaultExperienceLinkageRequest: AppStoreVersionAppClipDefaultExperienceLinkageRequest;
}

export interface AppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
    id: string;
    fieldsAppStoreReviewDetails?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppStoreReviewAttachments?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum>;
    limitAppStoreReviewAttachments?: number;
    include?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum>;
}

export interface AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
    id: string;
    filterState?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionExperimentTreatments?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    limit?: number;
    limitAppStoreVersionExperimentTreatments?: number;
    include?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum>;
}

export interface AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsAppStoreVersionLocalizations?: Array<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum>;
    limit?: number;
}

export interface AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest {
    id: string;
    fieldsAppStoreVersionPhasedReleases?: Array<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
}

export interface AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
    id: string;
    fieldsAppStoreVersionSubmissions?: Array<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum>;
    include?: Array<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum>;
}

export interface AppStoreVersionsBuildGetToOneRelatedRequest {
    id: string;
    fieldsBuilds?: Array<AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum>;
}

export interface AppStoreVersionsBuildGetToOneRelationshipRequest {
    id: string;
}

export interface AppStoreVersionsBuildUpdateToOneRelationshipRequest {
    id: string;
    appStoreVersionBuildLinkageRequest: AppStoreVersionBuildLinkageRequest;
}

export interface AppStoreVersionsCreateInstanceRequest {
    appStoreVersionCreateRequest: AppStoreVersionCreateRequest;
}

export interface AppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
    id: string;
    filterRating?: Array<string>;
    filterTerritory?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum>;
    existsPublishedResponse?: boolean;
    sort?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum>;
    fieldsCustomerReviews?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum>;
    fieldsCustomerReviewResponses?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum>;
    limit?: number;
    include?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum>;
}

export interface AppStoreVersionsDeleteInstanceRequest {
    id: string;
}

export interface AppStoreVersionsGetInstanceRequest {
    id: string;
    fieldsAppStoreVersions?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum>;
    include?: Array<AppStoreVersionsGetInstanceIncludeEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionSubmissions?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAgeRatingDeclarations?: Array<AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum>;
    fieldsCustomerReviews?: Array<AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum>;
    fieldsAppStoreReviewDetails?: Array<AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum>;
    fieldsRoutingAppCoverages?: Array<AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsBuilds?: Array<AppStoreVersionsGetInstanceFieldsBuildsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum>;
    limitAppStoreVersionExperiments?: number;
    limitAppStoreVersionLocalizations?: number;
}

export interface AppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest {
    id: string;
    fieldsRoutingAppCoverages?: Array<AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum>;
}

export interface AppStoreVersionsUpdateInstanceRequest {
    id: string;
    appStoreVersionUpdateRequest: AppStoreVersionUpdateRequest;
}

/**
 * 
 */
export class AppStoreVersionsApi extends runtime.BaseAPI {

    /**
     */
    async appStoreVersionsAgeRatingDeclarationGetToOneRelatedRaw(requestParameters: AppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgeRatingDeclarationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAgeRatingDeclarationGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/ageRatingDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgeRatingDeclarationResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAgeRatingDeclarationGetToOneRelated(requestParameters: AppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgeRatingDeclarationResponse> {
        const response = await this.appStoreVersionsAgeRatingDeclarationGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipAppStoreReviewDetails) {
            queryParameters['fields[appClipAppStoreReviewDetails]'] = requestParameters.fieldsAppClipAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperienceLocalizations) {
            queryParameters['fields[appClipDefaultExperienceLocalizations]'] = requestParameters.fieldsAppClipDefaultExperienceLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppClipDefaultExperienceLocalizations !== undefined) {
            queryParameters['limit[appClipDefaultExperienceLocalizations]'] = requestParameters.limitAppClipDefaultExperienceLocalizations;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelated(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceResponse> {
        const response = await this.appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionAppClipDefaultExperienceLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        const response = await this.appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters: AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.');
        }

        if (requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === null || requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionAppClipDefaultExperienceLinkageRequest','Required parameter requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionAppClipDefaultExperienceLinkageRequestToJSON(requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(requestParameters: AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreReviewDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreReviewDetailGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreReviewAttachments) {
            queryParameters['fields[appStoreReviewAttachments]'] = requestParameters.fieldsAppStoreReviewAttachments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreReviewAttachments !== undefined) {
            queryParameters['limit[appStoreReviewAttachments]'] = requestParameters.limitAppStoreReviewAttachments;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreReviewDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppStoreReviewDetailGetToOneRelated(requestParameters: AppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreReviewDetailResponse> {
        const response = await this.appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionExperimentsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
            queryParameters['fields[appStoreVersionExperimentTreatments]'] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
            queryParameters['limit[appStoreVersionExperimentTreatments]'] = requestParameters.limitAppStoreVersionExperimentTreatments;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionExperiments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(requestParameters: AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentsResponse> {
        const response = await this.appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(requestParameters: AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionLocalizationsResponse> {
        const response = await this.appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionPhasedReleaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionPhasedReleaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(requestParameters: AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionPhasedReleaseResponse> {
        const response = await this.appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionSubmissionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionSubmissionGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionSubmission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(requestParameters: AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionSubmissionResponse> {
        const response = await this.appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsBuildGetToOneRelatedRaw(requestParameters: AppStoreVersionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsBuildGetToOneRelated(requestParameters: AppStoreVersionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildResponse> {
        const response = await this.appStoreVersionsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters: AppStoreVersionsBuildGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionBuildLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionBuildLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsBuildGetToOneRelationship(requestParameters: AppStoreVersionsBuildGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionBuildLinkageResponse> {
        const response = await this.appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters: AppStoreVersionsBuildUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.');
        }

        if (requestParameters.appStoreVersionBuildLinkageRequest === null || requestParameters.appStoreVersionBuildLinkageRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionBuildLinkageRequest','Required parameter requestParameters.appStoreVersionBuildLinkageRequest was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionBuildLinkageRequestToJSON(requestParameters.appStoreVersionBuildLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appStoreVersionsBuildUpdateToOneRelationship(requestParameters: AppStoreVersionsBuildUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appStoreVersionsCreateInstanceRaw(requestParameters: AppStoreVersionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.appStoreVersionCreateRequest === null || requestParameters.appStoreVersionCreateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionCreateRequest','Required parameter requestParameters.appStoreVersionCreateRequest was null or undefined when calling appStoreVersionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionCreateRequestToJSON(requestParameters.appStoreVersionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsCreateInstance(requestParameters: AppStoreVersionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appStoreVersionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters: AppStoreVersionsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerReviewsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsCustomerReviewsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterRating) {
            queryParameters['filter[rating]'] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.existsPublishedResponse !== undefined) {
            queryParameters['exists[publishedResponse]'] = requestParameters.existsPublishedResponse;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCustomerReviewResponses) {
            queryParameters['fields[customerReviewResponses]'] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerReviewsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsCustomerReviewsGetToManyRelated(requestParameters: AppStoreVersionsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerReviewsResponse> {
        const response = await this.appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsDeleteInstanceRaw(requestParameters: AppStoreVersionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appStoreVersionsDeleteInstance(requestParameters: AppStoreVersionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appStoreVersionsGetInstanceRaw(requestParameters: AppStoreVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }

        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsGetInstance(requestParameters: AppStoreVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appStoreVersionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters: AppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingAppCoverageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsRoutingAppCoverageGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/routingAppCoverage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingAppCoverageResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsRoutingAppCoverageGetToOneRelated(requestParameters: AppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingAppCoverageResponse> {
        const response = await this.appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionsUpdateInstanceRaw(requestParameters: AppStoreVersionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionsUpdateInstance.');
        }

        if (requestParameters.appStoreVersionUpdateRequest === null || requestParameters.appStoreVersionUpdateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionUpdateRequest','Required parameter requestParameters.appStoreVersionUpdateRequest was null or undefined when calling appStoreVersionsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionUpdateRequestToJSON(requestParameters.appStoreVersionUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionsUpdateInstance(requestParameters: AppStoreVersionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appStoreVersionsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    Gambling: 'gambling',
    GamblingAndContests: 'gamblingAndContests',
    GamblingSimulated: 'gamblingSimulated',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    KidsAgeBand: 'kidsAgeBand',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SeventeenPlus: 'seventeenPlus',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealistic: 'violenceRealistic',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic'
} as const;
export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum = typeof AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum[keyof typeof AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum = {
    App: 'app',
    AppClipAdvancedExperiences: 'appClipAdvancedExperiences',
    AppClipDefaultExperiences: 'appClipDefaultExperiences',
    BundleId: 'bundleId'
} as const;
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum = typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum[keyof typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    InvocationUrls: 'invocationUrls'
} as const;
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum[keyof typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum = typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppClipHeaderImage: 'appClipHeaderImage',
    Locale: 'locale',
    Subtitle: 'subtitle'
} as const;
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum[keyof typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum = {
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum = typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum[keyof typeof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: 'appStoreReviewAttachments',
    AppStoreVersion: 'appStoreVersion',
    ContactEmail: 'contactEmail',
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes'
} as const;
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum = typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum[keyof typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum = typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum = {
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum = typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum[keyof typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum = {
    AppStoreReviewAttachments: 'appStoreReviewAttachments',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum = typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum[keyof typeof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum = {
    PrepareForSubmission: 'PREPARE_FOR_SUBMISSION',
    ReadyForReview: 'READY_FOR_REVIEW',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    Accepted: 'ACCEPTED',
    Approved: 'APPROVED',
    Rejected: 'REJECTED',
    Completed: 'COMPLETED',
    Stopped: 'STOPPED'
} as const;
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum = typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum[keyof typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    EndDate: 'endDate',
    Name: 'name',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = {
    AppIcon: 'appIcon',
    AppIconName: 'appIconName',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentTreatmentLocalizations: 'appStoreVersionExperimentTreatmentLocalizations',
    Name: 'name',
    PromotedDate: 'promotedDate'
} as const;
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum[keyof typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum = typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments'
} as const;
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum = typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum[keyof typeof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: 'appPreviewSets',
    AppScreenshotSets: 'appScreenshotSets',
    AppStoreVersion: 'appStoreVersion',
    Description: 'description',
    Keywords: 'keywords',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PromotionalText: 'promotionalText',
    SupportUrl: 'supportUrl',
    WhatsNew: 'whatsNew'
} as const;
export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = typeof AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum[keyof typeof AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: 'appStoreVersion',
    CurrentDayNumber: 'currentDayNumber',
    PhasedReleaseState: 'phasedReleaseState',
    StartDate: 'startDate',
    TotalPauseDuration: 'totalPauseDuration'
} as const;
export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = typeof AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum[keyof typeof AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = typeof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum[keyof typeof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum = typeof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum = typeof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum[keyof typeof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum = typeof AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum[keyof typeof AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = {
    Abw: 'ABW',
    Afg: 'AFG',
    Ago: 'AGO',
    Aia: 'AIA',
    Alb: 'ALB',
    And: 'AND',
    Ant: 'ANT',
    Are: 'ARE',
    Arg: 'ARG',
    Arm: 'ARM',
    Asm: 'ASM',
    Atg: 'ATG',
    Aus: 'AUS',
    Aut: 'AUT',
    Aze: 'AZE',
    Bdi: 'BDI',
    Bel: 'BEL',
    Ben: 'BEN',
    Bes: 'BES',
    Bfa: 'BFA',
    Bgd: 'BGD',
    Bgr: 'BGR',
    Bhr: 'BHR',
    Bhs: 'BHS',
    Bih: 'BIH',
    Blr: 'BLR',
    Blz: 'BLZ',
    Bmu: 'BMU',
    Bol: 'BOL',
    Bra: 'BRA',
    Brb: 'BRB',
    Brn: 'BRN',
    Btn: 'BTN',
    Bwa: 'BWA',
    Caf: 'CAF',
    Can: 'CAN',
    Che: 'CHE',
    Chl: 'CHL',
    Chn: 'CHN',
    Civ: 'CIV',
    Cmr: 'CMR',
    Cod: 'COD',
    Cog: 'COG',
    Cok: 'COK',
    Col: 'COL',
    Com: 'COM',
    Cpv: 'CPV',
    Cri: 'CRI',
    Cub: 'CUB',
    Cuw: 'CUW',
    Cxr: 'CXR',
    Cym: 'CYM',
    Cyp: 'CYP',
    Cze: 'CZE',
    Deu: 'DEU',
    Dji: 'DJI',
    Dma: 'DMA',
    Dnk: 'DNK',
    Dom: 'DOM',
    Dza: 'DZA',
    Ecu: 'ECU',
    Egy: 'EGY',
    Eri: 'ERI',
    Esp: 'ESP',
    Est: 'EST',
    Eth: 'ETH',
    Fin: 'FIN',
    Fji: 'FJI',
    Flk: 'FLK',
    Fra: 'FRA',
    Fro: 'FRO',
    Fsm: 'FSM',
    Gab: 'GAB',
    Gbr: 'GBR',
    Geo: 'GEO',
    Ggy: 'GGY',
    Gha: 'GHA',
    Gib: 'GIB',
    Gin: 'GIN',
    Glp: 'GLP',
    Gmb: 'GMB',
    Gnb: 'GNB',
    Gnq: 'GNQ',
    Grc: 'GRC',
    Grd: 'GRD',
    Grl: 'GRL',
    Gtm: 'GTM',
    Guf: 'GUF',
    Gum: 'GUM',
    Guy: 'GUY',
    Hkg: 'HKG',
    Hnd: 'HND',
    Hrv: 'HRV',
    Hti: 'HTI',
    Hun: 'HUN',
    Idn: 'IDN',
    Imn: 'IMN',
    Ind: 'IND',
    Irl: 'IRL',
    Irq: 'IRQ',
    Isl: 'ISL',
    Isr: 'ISR',
    Ita: 'ITA',
    Jam: 'JAM',
    Jey: 'JEY',
    Jor: 'JOR',
    Jpn: 'JPN',
    Kaz: 'KAZ',
    Ken: 'KEN',
    Kgz: 'KGZ',
    Khm: 'KHM',
    Kir: 'KIR',
    Kna: 'KNA',
    Kor: 'KOR',
    Kwt: 'KWT',
    Lao: 'LAO',
    Lbn: 'LBN',
    Lbr: 'LBR',
    Lby: 'LBY',
    Lca: 'LCA',
    Lie: 'LIE',
    Lka: 'LKA',
    Lso: 'LSO',
    Ltu: 'LTU',
    Lux: 'LUX',
    Lva: 'LVA',
    Mac: 'MAC',
    Mar: 'MAR',
    Mco: 'MCO',
    Mda: 'MDA',
    Mdg: 'MDG',
    Mdv: 'MDV',
    Mex: 'MEX',
    Mhl: 'MHL',
    Mkd: 'MKD',
    Mli: 'MLI',
    Mlt: 'MLT',
    Mmr: 'MMR',
    Mne: 'MNE',
    Mng: 'MNG',
    Mnp: 'MNP',
    Moz: 'MOZ',
    Mrt: 'MRT',
    Msr: 'MSR',
    Mtq: 'MTQ',
    Mus: 'MUS',
    Mwi: 'MWI',
    Mys: 'MYS',
    Myt: 'MYT',
    Nam: 'NAM',
    Ncl: 'NCL',
    Ner: 'NER',
    Nfk: 'NFK',
    Nga: 'NGA',
    Nic: 'NIC',
    Niu: 'NIU',
    Nld: 'NLD',
    Nor: 'NOR',
    Npl: 'NPL',
    Nru: 'NRU',
    Nzl: 'NZL',
    Omn: 'OMN',
    Pak: 'PAK',
    Pan: 'PAN',
    Per: 'PER',
    Phl: 'PHL',
    Plw: 'PLW',
    Png: 'PNG',
    Pol: 'POL',
    Pri: 'PRI',
    Prt: 'PRT',
    Pry: 'PRY',
    Pse: 'PSE',
    Pyf: 'PYF',
    Qat: 'QAT',
    Reu: 'REU',
    Rou: 'ROU',
    Rus: 'RUS',
    Rwa: 'RWA',
    Sau: 'SAU',
    Sen: 'SEN',
    Sgp: 'SGP',
    Shn: 'SHN',
    Slb: 'SLB',
    Sle: 'SLE',
    Slv: 'SLV',
    Smr: 'SMR',
    Som: 'SOM',
    Spm: 'SPM',
    Srb: 'SRB',
    Ssd: 'SSD',
    Stp: 'STP',
    Sur: 'SUR',
    Svk: 'SVK',
    Svn: 'SVN',
    Swe: 'SWE',
    Swz: 'SWZ',
    Sxm: 'SXM',
    Syc: 'SYC',
    Tca: 'TCA',
    Tcd: 'TCD',
    Tgo: 'TGO',
    Tha: 'THA',
    Tjk: 'TJK',
    Tkm: 'TKM',
    Tls: 'TLS',
    Ton: 'TON',
    Tto: 'TTO',
    Tun: 'TUN',
    Tur: 'TUR',
    Tuv: 'TUV',
    Twn: 'TWN',
    Tza: 'TZA',
    Uga: 'UGA',
    Ukr: 'UKR',
    Umi: 'UMI',
    Ury: 'URY',
    Usa: 'USA',
    Uzb: 'UZB',
    Vat: 'VAT',
    Vct: 'VCT',
    Ven: 'VEN',
    Vgb: 'VGB',
    Vir: 'VIR',
    Vnm: 'VNM',
    Vut: 'VUT',
    Wlf: 'WLF',
    Wsm: 'WSM',
    Yem: 'YEM',
    Zaf: 'ZAF',
    Zmb: 'ZMB',
    Zwe: 'ZWE'
} as const;
export type AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = typeof AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum[keyof typeof AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum];
/**
 * @export
 */
export const AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum = {
    CreatedDate: 'createdDate',
    CreatedDate: '-createdDate',
    Rating: 'rating',
    Rating: '-rating'
} as const;
export type AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum = typeof AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum[keyof typeof AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum];
/**
 * @export
 */
export const AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = {
    Body: 'body',
    CreatedDate: 'createdDate',
    Rating: 'rating',
    Response: 'response',
    ReviewerNickname: 'reviewerNickname',
    Territory: 'territory',
    Title: 'title'
} as const;
export type AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = typeof AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum[keyof typeof AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum];
/**
 * @export
 */
export const AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = {
    LastModifiedDate: 'lastModifiedDate',
    ResponseBody: 'responseBody',
    Review: 'review',
    State: 'state'
} as const;
export type AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = typeof AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum[keyof typeof AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum];
/**
 * @export
 */
export const AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum = {
    Response: 'response'
} as const;
export type AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum = typeof AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum[keyof typeof AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum = typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceIncludeEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    RoutingAppCoverage: 'routingAppCoverage'
} as const;
export type AppStoreVersionsGetInstanceIncludeEnum = typeof AppStoreVersionsGetInstanceIncludeEnum[keyof typeof AppStoreVersionsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    EndDate: 'endDate',
    Name: 'name',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum = typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum = typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum = {
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    Gambling: 'gambling',
    GamblingAndContests: 'gamblingAndContests',
    GamblingSimulated: 'gamblingSimulated',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    KidsAgeBand: 'kidsAgeBand',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SeventeenPlus: 'seventeenPlus',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealistic: 'violenceRealistic',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic'
} as const;
export type AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum = typeof AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum = {
    Body: 'body',
    CreatedDate: 'createdDate',
    Rating: 'rating',
    Response: 'response',
    ReviewerNickname: 'reviewerNickname',
    Territory: 'territory',
    Title: 'title'
} as const;
export type AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum = typeof AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: 'appStoreReviewAttachments',
    AppStoreVersion: 'appStoreVersion',
    ContactEmail: 'contactEmail',
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum = typeof AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum = typeof AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: 'appStoreVersion',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum = typeof AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum[keyof typeof AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: 'appStoreVersion',
    CurrentDayNumber: 'currentDayNumber',
    PhasedReleaseState: 'phasedReleaseState',
    StartDate: 'startDate',
    TotalPauseDuration: 'totalPauseDuration'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum = typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type AppStoreVersionsGetInstanceFieldsBuildsEnum = typeof AppStoreVersionsGetInstanceFieldsBuildsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: 'appPreviewSets',
    AppScreenshotSets: 'appScreenshotSets',
    AppStoreVersion: 'appStoreVersion',
    Description: 'description',
    Keywords: 'keywords',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PromotionalText: 'promotionalText',
    SupportUrl: 'supportUrl',
    WhatsNew: 'whatsNew'
} as const;
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum = typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum[keyof typeof AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum];
/**
 * @export
 */
export const AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: 'appStoreVersion',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum = typeof AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum[keyof typeof AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum];
