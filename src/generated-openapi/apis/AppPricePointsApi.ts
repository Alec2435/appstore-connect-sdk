/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppPricePointResponse,
  AppPricePointsResponse,
  ErrorResponse,
  TerritoryResponse,
} from '../models';
import {
    AppPricePointResponseFromJSON,
    AppPricePointResponseToJSON,
    AppPricePointsResponseFromJSON,
    AppPricePointsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TerritoryResponseFromJSON,
    TerritoryResponseToJSON,
} from '../models';

export interface AppPricePointsGetCollectionRequest {
    filterPriceTier?: Array<string>;
    filterTerritory?: Array<string>;
    fieldsAppPricePoints?: Array<AppPricePointsGetCollectionFieldsAppPricePointsEnum>;
    limit?: number;
    include?: Array<AppPricePointsGetCollectionIncludeEnum>;
    fieldsTerritories?: Array<AppPricePointsGetCollectionFieldsTerritoriesEnum>;
}

export interface AppPricePointsGetInstanceRequest {
    id: string;
    fieldsAppPricePoints?: Array<AppPricePointsGetInstanceFieldsAppPricePointsEnum>;
    include?: Array<AppPricePointsGetInstanceIncludeEnum>;
    fieldsTerritories?: Array<AppPricePointsGetInstanceFieldsTerritoriesEnum>;
}

export interface AppPricePointsTerritoryGetToOneRelatedRequest {
    id: string;
    fieldsTerritories?: Array<AppPricePointsTerritoryGetToOneRelatedFieldsTerritoriesEnum>;
}

/**
 * 
 */
export class AppPricePointsApi extends runtime.BaseAPI {

    /**
     */
    async appPricePointsGetCollectionRaw(requestParameters: AppPricePointsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPricePointsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterPriceTier) {
            queryParameters['filter[priceTier]'] = requestParameters.filterPriceTier.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppPricePoints) {
            queryParameters['fields[appPricePoints]'] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPricePoints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPricePointsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPricePointsGetCollection(requestParameters: AppPricePointsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPricePointsResponse> {
        const response = await this.appPricePointsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPricePointsGetInstanceRaw(requestParameters: AppPricePointsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPricePointResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPricePointsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppPricePoints) {
            queryParameters['fields[appPricePoints]'] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPricePoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPricePointResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPricePointsGetInstance(requestParameters: AppPricePointsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPricePointResponse> {
        const response = await this.appPricePointsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPricePointsTerritoryGetToOneRelatedRaw(requestParameters: AppPricePointsTerritoryGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerritoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPricePointsTerritoryGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPricePoints/{id}/territory`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerritoryResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPricePointsTerritoryGetToOneRelated(requestParameters: AppPricePointsTerritoryGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerritoryResponse> {
        const response = await this.appPricePointsTerritoryGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppPricePointsGetCollectionFieldsAppPricePointsEnum = {
    CustomerPrice: 'customerPrice',
    PriceTier: 'priceTier',
    Proceeds: 'proceeds',
    Territory: 'territory'
} as const;
export type AppPricePointsGetCollectionFieldsAppPricePointsEnum = typeof AppPricePointsGetCollectionFieldsAppPricePointsEnum[keyof typeof AppPricePointsGetCollectionFieldsAppPricePointsEnum];
/**
 * @export
 */
export const AppPricePointsGetCollectionIncludeEnum = {
    PriceTier: 'priceTier',
    Territory: 'territory'
} as const;
export type AppPricePointsGetCollectionIncludeEnum = typeof AppPricePointsGetCollectionIncludeEnum[keyof typeof AppPricePointsGetCollectionIncludeEnum];
/**
 * @export
 */
export const AppPricePointsGetCollectionFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type AppPricePointsGetCollectionFieldsTerritoriesEnum = typeof AppPricePointsGetCollectionFieldsTerritoriesEnum[keyof typeof AppPricePointsGetCollectionFieldsTerritoriesEnum];
/**
 * @export
 */
export const AppPricePointsGetInstanceFieldsAppPricePointsEnum = {
    CustomerPrice: 'customerPrice',
    PriceTier: 'priceTier',
    Proceeds: 'proceeds',
    Territory: 'territory'
} as const;
export type AppPricePointsGetInstanceFieldsAppPricePointsEnum = typeof AppPricePointsGetInstanceFieldsAppPricePointsEnum[keyof typeof AppPricePointsGetInstanceFieldsAppPricePointsEnum];
/**
 * @export
 */
export const AppPricePointsGetInstanceIncludeEnum = {
    PriceTier: 'priceTier',
    Territory: 'territory'
} as const;
export type AppPricePointsGetInstanceIncludeEnum = typeof AppPricePointsGetInstanceIncludeEnum[keyof typeof AppPricePointsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppPricePointsGetInstanceFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type AppPricePointsGetInstanceFieldsTerritoriesEnum = typeof AppPricePointsGetInstanceFieldsTerritoriesEnum[keyof typeof AppPricePointsGetInstanceFieldsTerritoriesEnum];
/**
 * @export
 */
export const AppPricePointsTerritoryGetToOneRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type AppPricePointsTerritoryGetToOneRelatedFieldsTerritoriesEnum = typeof AppPricePointsTerritoryGetToOneRelatedFieldsTerritoriesEnum[keyof typeof AppPricePointsTerritoryGetToOneRelatedFieldsTerritoriesEnum];
