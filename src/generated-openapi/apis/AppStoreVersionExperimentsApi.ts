/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppStoreVersionExperimentCreateRequest,
  AppStoreVersionExperimentResponse,
  AppStoreVersionExperimentTreatmentsResponse,
  AppStoreVersionExperimentUpdateRequest,
  ErrorResponse,
} from '../models';
import {
    AppStoreVersionExperimentCreateRequestFromJSON,
    AppStoreVersionExperimentCreateRequestToJSON,
    AppStoreVersionExperimentResponseFromJSON,
    AppStoreVersionExperimentResponseToJSON,
    AppStoreVersionExperimentTreatmentsResponseFromJSON,
    AppStoreVersionExperimentTreatmentsResponseToJSON,
    AppStoreVersionExperimentUpdateRequestFromJSON,
    AppStoreVersionExperimentUpdateRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedRequest {
    id: string;
    fieldsAppStoreVersionExperiments?: Array<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionExperimentTreatments?: Array<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum>;
    fieldsAppStoreVersionExperimentTreatmentLocalizations?: Array<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum>;
    limit?: number;
    limitAppStoreVersionExperimentTreatmentLocalizations?: number;
    include?: Array<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedIncludeEnum>;
}

export interface AppStoreVersionExperimentsCreateInstanceRequest {
    appStoreVersionExperimentCreateRequest: AppStoreVersionExperimentCreateRequest;
}

export interface AppStoreVersionExperimentsDeleteInstanceRequest {
    id: string;
}

export interface AppStoreVersionExperimentsGetInstanceRequest {
    id: string;
    fieldsAppStoreVersionExperiments?: Array<AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentsEnum>;
    include?: Array<AppStoreVersionExperimentsGetInstanceIncludeEnum>;
    fieldsAppStoreVersionExperimentTreatments?: Array<AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentTreatmentsEnum>;
    limitAppStoreVersionExperimentTreatments?: number;
}

export interface AppStoreVersionExperimentsUpdateInstanceRequest {
    id: string;
    appStoreVersionExperimentUpdateRequest: AppStoreVersionExperimentUpdateRequest;
}

/**
 * 
 */
export class AppStoreVersionExperimentsApi extends runtime.BaseAPI {

    /**
     */
    async appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedRaw(requestParameters: AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentTreatmentsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
            queryParameters['fields[appStoreVersionExperimentTreatments]'] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations) {
            queryParameters['fields[appStoreVersionExperimentTreatmentLocalizations]'] = requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.limitAppStoreVersionExperimentTreatmentLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionExperimentTreatmentLocalizations]'] = requestParameters.limitAppStoreVersionExperimentTreatmentLocalizations;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentTreatmentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated(requestParameters: AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentTreatmentsResponse> {
        const response = await this.appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionExperimentsCreateInstanceRaw(requestParameters: AppStoreVersionExperimentsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentResponse>> {
        if (requestParameters.appStoreVersionExperimentCreateRequest === null || requestParameters.appStoreVersionExperimentCreateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionExperimentCreateRequest','Required parameter requestParameters.appStoreVersionExperimentCreateRequest was null or undefined when calling appStoreVersionExperimentsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperiments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionExperimentCreateRequestToJSON(requestParameters.appStoreVersionExperimentCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionExperimentsCreateInstance(requestParameters: AppStoreVersionExperimentsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentResponse> {
        const response = await this.appStoreVersionExperimentsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionExperimentsDeleteInstanceRaw(requestParameters: AppStoreVersionExperimentsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperiments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appStoreVersionExperimentsDeleteInstance(requestParameters: AppStoreVersionExperimentsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionExperimentsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appStoreVersionExperimentsGetInstanceRaw(requestParameters: AppStoreVersionExperimentsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
            queryParameters['fields[appStoreVersionExperimentTreatments]'] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
            queryParameters['limit[appStoreVersionExperimentTreatments]'] = requestParameters.limitAppStoreVersionExperimentTreatments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperiments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionExperimentsGetInstance(requestParameters: AppStoreVersionExperimentsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentResponse> {
        const response = await this.appStoreVersionExperimentsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionExperimentsUpdateInstanceRaw(requestParameters: AppStoreVersionExperimentsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentsUpdateInstance.');
        }

        if (requestParameters.appStoreVersionExperimentUpdateRequest === null || requestParameters.appStoreVersionExperimentUpdateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionExperimentUpdateRequest','Required parameter requestParameters.appStoreVersionExperimentUpdateRequest was null or undefined when calling appStoreVersionExperimentsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperiments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionExperimentUpdateRequestToJSON(requestParameters.appStoreVersionExperimentUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionExperimentsUpdateInstance(requestParameters: AppStoreVersionExperimentsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentResponse> {
        const response = await this.appStoreVersionExperimentsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    EndDate: 'endDate',
    Name: 'name',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = {
    AppIcon: 'appIcon',
    AppIconName: 'appIconName',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentTreatmentLocalizations: 'appStoreVersionExperimentTreatmentLocalizations',
    Name: 'name',
    PromotedDate: 'promotedDate'
} as const;
export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum[keyof typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum];
/**
 * @export
 */
export const AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum = {
    AppPreviewSets: 'appPreviewSets',
    AppScreenshotSets: 'appScreenshotSets',
    AppStoreVersionExperimentTreatment: 'appStoreVersionExperimentTreatment',
    Locale: 'locale'
} as const;
export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum = typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum[keyof typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum];
/**
 * @export
 */
export const AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedIncludeEnum = {
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentTreatmentLocalizations: 'appStoreVersionExperimentTreatmentLocalizations'
} as const;
export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedIncludeEnum = typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedIncludeEnum[keyof typeof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentsEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    EndDate: 'endDate',
    Name: 'name',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentsEnum = typeof AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentsEnum[keyof typeof AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppStoreVersionExperimentsGetInstanceIncludeEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments'
} as const;
export type AppStoreVersionExperimentsGetInstanceIncludeEnum = typeof AppStoreVersionExperimentsGetInstanceIncludeEnum[keyof typeof AppStoreVersionExperimentsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentTreatmentsEnum = {
    AppIcon: 'appIcon',
    AppIconName: 'appIconName',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentTreatmentLocalizations: 'appStoreVersionExperimentTreatmentLocalizations',
    Name: 'name',
    PromotedDate: 'promotedDate'
} as const;
export type AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentTreatmentsEnum = typeof AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentTreatmentsEnum[keyof typeof AppStoreVersionExperimentsGetInstanceFieldsAppStoreVersionExperimentTreatmentsEnum];
